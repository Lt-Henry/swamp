#!/usr/bin/python3


import os
import sys
import socket
import threading
import queue
import time

class TCPConnection:
    def __init__(self,sfd,address):
        self.out=queue.Queue()
        self.sfd=sfd
        self.address=address
        self.r_worker=threading.Thread(target=tcp_read_worker,args=(self,))
        self.w_worker=threading.Thread(target=tcp_write_worker,args=(self,))

broker_queue = queue.Queue()
tcp_connections=[]

    
def tcp_listen_worker():
    serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    serversocket.bind(('', 12345))
    serversocket.listen(1)
    
    while True:
        (clientsocket, address) = serversocket.accept()
        msg={}
        msg["method"]="tcp_accept"
        msg["socket"]=clientsocket
        msg["address"]=address
        broker_queue.put(msg)

def tcp_connect_worker(master_address):
    try:
        clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        clientsocket.connect((master_address,12345))
        msg={}
        msg["method"]="tcp_connect"
        msg["socket"]=clientsocket
        msg["address"]=master_address
        broker_queue.put(msg)
    except:
        msg={}
        msg["method"]="tcp_connect_error"
        msg["address"]=master_address
        broker_queue.put(msg)

def tcp_read_worker(connection):
    
    chunk=[]
    while True:
        buffer=connection.sfd.recv(4096)
        

def tcp_write_worker(connection):
    while True:
        msg=connection.out.get()
        #convert to bson
        chunk=[]
        

def uds_read_worker():
    pass

def uds_write_worker():
    pass
    
def uds_listen_worker():
    pass

def broker_worker():
    print("broker worker")
    
    while True:
        msg = broker_queue.get()
        
        method=msg.get("method")
        
        if (method==None):
            print("Unknown msg")
            continue
        
        if (method=="create_master"):
            print("configured as master")
            t=threading.Thread(target=tcp_listen_worker)
            t.start()
            
        if (method=="create_client"):
            print("connecting to {0}".format(msg["master"]))
            t=threading.Thread(target=tcp_connect_worker,args=(msg["master"],))
            t.start()
            
        if (method=="tcp_accept"):
            print("incoming TCP connection")
            connection=TCPConnection(msg["socket"],msg["address"])
            tcp_connections.append(connection)
        
        if (method=="tcp_connect"):
            print("broker connected to {0}".format(msg["address"]))
            connection=TCPConnection(msg["socket"],msg["address"])
            tcp_connections.append(connection)
        
        if (method=="tcp_connect_error"):
            print("broker failed to connected to {0}".format(msg["address"]))
        
if len(sys.argv)>1:
    if sys.argv[1]=="master":
        broker_queue.put({"method":"create_master"})
    
    if len(sys.argv)>2:
        if sys.argv[1]=="client":
            broker_queue.put({"method":"create_client",
            "master":sys.argv[2]})
        
broker_worker()
